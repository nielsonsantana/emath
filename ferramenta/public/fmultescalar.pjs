
/* @pjs preload="images/colcheteDir_mim.png,images/colcheteEsq_mim.png,images/opmult.png, images/opsoma.png,images/opsub.png,images/igualdade.png"; */

getElement = function(id){
   return document.getElementById(id);
};

lm1 = getElement("lm1").value;
cm1 = getElement("cm1").value;


MatrizGrafica m =  new MatrizGrafica(int(lm1),int(cm1),35,0,50);
MatrizGrafica mMult;
int escalar = 0;

colcheteEsq = loadImage("images/colcheteEsq_mim.png");
colcheteDir = loadImage("images/colcheteDir_mim.png");

color planofundo = 200;

void desenharEstruturaMatriz(int x, int y,int distancia){
    
    image(colcheteEsq,x,y);
    image(colcheteDir,x+344,y);

    //Desenhando linhas verticais
    for(int i = 0; i <= 7; i++)
        line(i*distancia+x+10,y+5,i*distancia+x+10,(5*50)+y);

    //Texto Horizontal
    for(int i = 0; i <= 6; i++)
        text(i+1,(i*distancia)+x+28,y);

    //Desenhando linhas horizontais
    for(int i = 0; i <= 5; i++)
        line(x+10,i*distancia+(y+5),7*50+x+10,i*distancia+(y+5));

    //Texto Vertical
    for(int i = 0; i <= 4; i++)
        text(i+1,x-10,(i*distancia)+y+30);
    
}

void setup()
{
    size(1000,560);
    background(planofundo);
    fill(90);
    loop();
    textFont("monospace",15);
    fill(255);

    opsoma = loadImage("images/opsoma.png");
    opsub = loadImage("images/opsub.png");
    opmult = loadImage("images/opmult.png");
    igualdade = loadImage("images/igualdade.png");
    
    image(opmult,435,100);
    image(igualdade,910,100);

    frameRate(getElement("lbseg").value);
    strokeWeight(0.2);

    desenharEstruturaMatriz(50,20,50);
    desenharEstruturaMatriz(50,300,50);
    

    textSize(23);
    m.desenharMatriz();
	escalar = int(random(-9,9));
    mMult = m.multiplicacaoPorEscalar(escalar);
    text("Status da execução da programa:",650,300);
	text("M1 ",25,20);
	textAlign(CENTER)
	strokeWeight(10);
	noFill();
	stroke(#20B117);
	rect(680,150,100,100);
	text(escalar,680,150);
    noLoop();
}

void draw(){
	
	if(((m.getLinColor()+1) == m.getNlin()) && ((m.getColColor()+1) == m.getNcol())){
		noLoop();
	}
	
    color c = color(#20B117);
    m.desenharRetangulo(c);
    m.proxCordenadaHorizotal();
    mMult.desenharRetanguloETexto(c);
    mMult.proxCordenadaHorizotal();
    fill(planofundo);
    noStroke();
    rectMode(CORNER);
    rect(530, 320, 450,230);
    fill(255);
    lin = m.getLinColor();
    col = m.getColColor();
    textLeading(24);
    text("M1("+(m.getLinColor()+1)+","+(m.getColColor())+") * "+escalar+" =\n ("+m.getValue(lin,col)+
    ") * ("+escalar+") =\n "+mMult.getValue(lin,col),720,400);
}

void undraw(){
    m.apagarRetangulo();
    m.anterCordenadaHorizotal();
    mMult.apagarRetanguloETexto();
    mMult.anterCordenadaHorizotal();
    fill(planofundo);
    noStroke();
    rectMode(CORNER);
    rect(530, 320, 450,230);
    fill(255);
    lin = m.getLinColor();
    col = m.getColColor();
    textLeading(24);

    text("M1("+(m.getLinColor()+1)+","+(m.getColColor()+1)+") * M2("+(m2.getLinColor()+1)+","+(m2.getColColor()+1)+") =\n ("+m.getValue(lin,col)+
    ") * ("+m2.getValue(lin,col)+") =\n "+mSoma.getValue(lin,col),720,400);
}

void testarSolucao(){
	l1 = getElement("linha1").value;
	c1 = getElement("coluna1").value;
	l2 = getElement("linha2").value;
	c2 = getElement("coluna2").value;
	n1 = getElement("n1").value;
	n2 = getElement("n2").value;
	solucao = getElement("n2").value;
	
}

//Definição de uma classe matriz com algumas operações não inrentes a esta classe como desenharMatriz, desenharMatrizColorida
class MatrizGrafica {

	int[][] matriz = new int[10][10];
	int[][] colorido = new int[10][10];
	Cordenada[][] mposicao = new Cordenada[10][10];
	int col, lin;
	int colElem, linElem;
	int colColor, linColor; //Armazena os indices da linha e da coluna, para colorir os elementos da matriz
	int x, y;
	int distancia;
	int ladoQuadrado = 39;
	String posicao;

	MatrizGrafica(int lin, int col, int x, int y, int distancia){
		for(int i = 0; i < lin; i++){
			for(int j = 0; j < col; j++){
				matriz[i][j] = int(random(-9,9));
				mposicao[i][j] = new Cordenada(((j+1)*distancia+x), ((i+1)*distancia+y));
			}
		}
		
		this.distancia = distancia;
		this.y = y;
		this.x = x;
		this.col = col;
		this.lin = lin;
		this.colColor = 0;
		this.linColor = 0;
		this.colElem = 0;
		this.linElem = 0;
	}
	
	MatrizGrafica(int col, int lin, String posicao, int distancia){
		for(int i = 0; i < lin; i++){
			for(int j = 0; j < col; j++){
				matriz[i][j] = int(random(-9,9));
				mposicao[i][j] = new Cordenada(((j+1)*distancia+x)-1, ((i+1)*distancia+y)-1);
				println(mposicao[i][j].getX());
			}
		}
		if(posicao.equals("right")){
		    
        }
        else if(posicao.equals("left")){

        }
        else{
            
        }
		
		this.distancia = distancia;
		this.col = col;
		this.lin = lin;
		this.colColor = 0;
		this.linColor = 0;
	}
	
	void desenharMatriz(){
		noFill();
		textAlign(CENTER,CENTER);
		rectMode(CENTER);
		noStroke();
		for(int i = 0; i < lin; i++){
			for(int j = 0; j < col; j++){
				rect(mposicao[i][j].getX(),mposicao[i][j].getY(), ladoQuadrado,ladoQuadrado);
				text(int(matriz[i][j]), mposicao[i][j].getX(),mposicao[i][j].getY());
			}
		}
	 }
	 
	     //Desenha retangulo e o texto na posicao atual apontada por linColor e colColor
    void desenharRetanguloETexto(color c){
        
        fill(planofundo);
        stroke(c);
        strokeWeight(8);
		rectMode(CENTER);
		textAlign(CENTER,CENTER);
		rect(mposicao[linColor][colColor].getX(),mposicao[linColor][colColor].getY(), ladoQuadrado,ladoQuadrado);
		fill(255);
        text(matriz[linColor][colColor],mposicao[linColor][colColor].getX(),mposicao[linColor][colColor].getY());
    }
    
    //Desenha retangulo na posicao atual apontada por linColor e colColor
    void desenharRetangulo(color c){
		
		noFill();
		stroke(c);
		strokeWeight(8);
		rectMode(CENTER);
		rect(mposicao[linColor][colColor].getX(),mposicao[linColor][colColor].getY(), ladoQuadrado,ladoQuadrado);
	
	}
	
	void apagarRetangulo(){
		
		noFill();
		stroke(planofundo);
		strokeWeight(9);
		rectMode(CENTER);
		
		rect(mposicao[linColor][colColor].getX(),mposicao[linColor][colColor].getY(), ladoQuadrado,ladoQuadrado);
	}
	
	void apagarRetanguloETexto(){
		
		fill(planofundo);
		stroke(planofundo);
		rectMode(CENTER);
		textAlign(CENTER,CENTER);
		rect(mposicao[linColor][colColor].getX(),mposicao[linColor][colColor].getY(),ladoQuadrado,ladoQuadrado);
	}
	
	boolean proxCordenadaHorizotal(){
		
		colColor = colColor+1;
		
		if((colColor == col) && (linColor >= lin-1)){
			colColor = col-1;
			return false;
		}
		if(colColor == col){
		  colColor = 0;
		  linColor = linColor+1;
		}
	}
	
	boolean anterCordenadaHorizotal(){
		colColor = colColor-1;
		
		if((colColor < 0) && (linColor <= 0)){
			colColor = 0;
			return false;
		}
			
		if(colColor < 0){
			colColor = col-1;
			linColor = linColor-1;
		}
	}
	
	boolean proxCordenadaVertical(){
		
		linColor = linColor+1;
		
		if((colColor == col-1) && (linColor == lin)){
			linColor = lin-1;
			return false;
		}
		if(linColor == lin){
			linColor = 0;
			colColor = colColor+1;
		}
	}
	
	boolean anterCordenadaVertical(){
		colColor = colColor-1;
        if((colColor < 0) && (linColor <= 0)){
			colColor = 0;
			return false;
		}
			
		if(colColor < 0){
		  colColor = col-1;
		  linColor = linColor-1;
		}
	}

	void retanguloLinha(int lin){
		
	}
	
	void removerRetanguloLinha(int lin){
		
	}
	
	void retanguloColuna(int col){
		
	}
	
	void removerRetanguloColuna(int col){
		
	}

	MatrizGrafica soma(MatrizGrafica m2){

		MatrizGrafica mResult = new MatrizGrafica(m2.getNlin(), m2.getNcol(), 35, 280,m2.getDist());
		for(int i = 0; i < lin; i++){
			for(int j = 0; j < col; j++){
				mResult.matriz[i][j] = this.matriz[i][j] + m2.matriz[i][j];
			}
		}
		return mResult;
	}
	
	MatrizGrafica multiplicacao(MatrizGrafica m2){
		
		MatrizGrafica mResult = new MatrizGrafica(m2.getNlin(), m2.getNcol(), 35, 280,m2.getDist());
		for(int i = 0; i < col; i++){
			for(int j = 0; j < lin; j++){
				int sum = 0;
				for(int k = 0; k < col; k++){
					sum += matriz[j][k]*m2.matriz[k][i];
				}
				mResult.matriz[j][i] = sum;
			}
		}
		return mResult;
	}
	
	MatrizGrafica multiplicacaoPorEscalar(int escalar){

		MatrizGrafica mResult = new MatrizGrafica(this.getNlin(), this.getNcol(), 35, 280,this.getDist());
		for(int i = 0; i < this.lin; i++){
			for(int j = 0; j < this.col; j++){
				mResult.matriz[i][j] = matriz[i][j]*escalar;
			}
		}
		
		return mResult;
	}

	MatrizGrafica subtracao(MatrizGrafica m2){
		
		MatrizGrafica mResult = new MatrizGrafica(m2.getNlin(), m2.getNcol(), 35, 280,m2.getDist());
		for(int i = 0; i < lin; i++){
			for(int j = 0; j < col; j++){
				mResult.matriz[i][j] = this.matriz[i][j] - m2.matriz[i][j];
			}
		}
		return mResult;

	}
	
	void setPosicaoCirculo(int lin, int col){
		this.colColor = col;
		this.linColor = lin;
	}

	int getDist(){
		return this.distancia;
	}
 
	int getNlin(){
		return this.lin;
	}

	int getNcol(){
	   return this.col;
	}

	int getX(){
		return x;
	}

	void setX(int x){
		this.x = x;
	}

	int getY(){
		return y;
	}

	void setY(int y){
		this.y = y;
	}
	int getColColor(){
		return this.colColor;
	}
	
	int getLinColor(){
		return this.linColor;
	}
	
	void setColColor(int col){
		if(col < 0){
		this.colColor = 0;
		}else{
		this.colColor = col;
		}
	}
	
	void setLinColor(int lin){
		if(lin < 0){
		this.linColor = 0;
		}else{
			this.linColor = lin;
		}
	}
	
	int getValue(int lin, int col){
		return matriz[lin][col];
	}

}

class Cordenada{
  private int x, y;
  Cordenada(int x, int y){
    this.x = x;
    this.y = y;
  }
 
  int getX(){
    return x;
  }
  void setX(int x){
    this.x = x;
  }
  
  int getY(){
    return y;
  }
  void setY(int y){
    this.y = y;
  }
}


